name: Container Repository

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: true
        description: Github Token with repository environments read-write permission.
    inputs:
      ENVIRONMENT:
        type: string
        required: false
        default: ${{ github.ref_name }}
        description: Github environment. Workflow trigger branch name by default.

jobs:
  check-repository:
    name: Check Container Repository
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    outputs:
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - name: Checks for Container Repository environment variables
        if: ${{ vars.CONTAINER_REPOSITORY_URL }}
        run: echo "exists=true" >> $GITHUB_OUTPUT
        id: check

  create-repository:
    name: Create Container Repository
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    needs: check-repository
    if: ${{ !needs.check-repository.outputs.exists }}

    defaults:
      run:
        working-directory: .github/workflows/container/repository

    outputs:
      CONTAINER_REPOSITORY_URL: ${{ steps.terraform.outputs.CONTAINER_REPOSITORY_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        env:
          BUCKET: ${{ vars.TERRAFORM_BACKEND_BUCKET_ARN }}
          KMS_KEY: ${{ vars.TERRAFORM_BACKEND_KMS_KEY_ARN }}
          DYNAMODB_TABLE: ${{ vars.TERRAFORM_BACKEND_DYNAMODB_TABLE }}
        run: |
          terraform init \
            -backend-config="bucket=${BUCKET}" \
            -backend-config="kms_key_id=${KMS_KEY}" \
            -backend-config="dynamodb_table=${DYNAMODB_TABLE}"

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get Terraform Output
        id: terraform
        run: |
          echo "CONTAINER_REPOSITORY_URL=$(terraform output -raw container_repository_url)" >> $GITHUB_ENV

      # ## DO NOT REMOVE - USED FOR LOCAL TESTS
      # - name: Set up Github CLI
      #   run: |
      #     (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
      #     && sudo mkdir -p -m 755 /etc/apt/keyrings \
      #     && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
      #     && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
      #     && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
      #     && sudo apt update \
      #     && sudo apt install gh -y

      - name: Save terraform outputs to repository environment
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh variable set CONTAINER_REPOSITORY_URL -b "${{ env.CONTAINER_REPOSITORY_URL }}" -e ${{ inputs.ENVIRONMENT }} -R ${{ github.repository }}
